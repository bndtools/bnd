/*
 * org.bndtools.p2 Gradle build script
 */

import aQute.bnd.osgi.Jar
import org.apache.tools.ant.filters.ReplaceTokens

interface Injected {
	@Inject ExecOperations getExec()
	@Inject FileSystemOperations getFs()
}

/* Configure this project */
String masterVersion = String.format("%s-%s-g%.7s",
		bnd.get("p2.version"),
		bnd.get("timestamp"),
		bnd.get("Git-SHA"))
String p2Version = String.format("%s-g%.7s", // no timestamp
	bnd.get("p2.version"),
	bnd.get("Git-SHA"))

var p2Plugins = tasks.register("p2Plugins", Sync.class) {
	dependsOn("jarDependencies")
	from(bnd.get("plugins").tokenize(","))
	into(layout.getBuildDirectory().dir("plugins"))
}

var p2FeatureProperties = tasks.register("p2FeatureProperties", WriteProperties.class) {
	inputs.files(p2Plugins).withPropertyName("p2Plugins")
	destinationFile = layout.getBuildDirectory().file("feature.properties")
	encoding = "UTF-8"
	var plugins = objects.fileTree().from(p2Plugins.map { it.destinationDir })
	doFirst("collect") { t ->
		plugins.each {
			new Jar(it).withCloseable { jar ->
				t.property("${jar.getBsn()}-version", jar.getVersion())
			}
		}
	}
}

var p2FeatureMain = tasks.register("p2FeatureMain", Zip.class) {
	inputs.files(p2FeatureProperties).withPropertyName("p2FeatureProperties")
	inputs.property("p2.version", p2Version)
	destinationDirectory = layout.getBuildDirectory().dir("features")
	archiveFileName = "bndtools.main.feature.jar"
	from("features/bndtools.main")
	include("feature.xml")
	var propertiesFile = p2FeatureProperties.flatMap { it.destinationFile }
	doFirst("filter") { t ->
		Properties properties = new Properties()
		propertiesFile.get().getAsFile().withReader("UTF-8") {
			properties.load(it)
			properties.put("master-version", masterVersion)
		}
		t.filter(ReplaceTokens.class, "tokens": properties)
	}
}

var p2FeatureM2e = tasks.register("p2FeatureM2e", Zip.class) {
	inputs.files(p2FeatureProperties).withPropertyName("p2FeatureProperties")
	inputs.property("p2.version", p2Version)
	destinationDirectory = layout.getBuildDirectory().dir("features")
	archiveFileName = "bndtools.m2e.feature.jar"
	from("features/bndtools.m2e")
	include("feature.xml")
	var propertiesFile = p2FeatureProperties.flatMap { it.destinationFile }
	doFirst("filter") { t ->
		Properties properties = new Properties()
		propertiesFile.get().getAsFile().withReader("UTF-8") {
			properties.load(it)
			properties.put("master-version", masterVersion)
		}
		t.filter(ReplaceTokens.class, "tokens": properties)
	}
}

var p2FeaturePde = tasks.register("p2FeaturePde", Zip.class) {
	inputs.files(p2FeatureProperties).withPropertyName("p2FeatureProperties")
	inputs.property("p2.version", p2Version)
	destinationDirectory = layout.getBuildDirectory().dir("features")
	archiveFileName = "bndtools.pde.feature.jar"
	from("features/bndtools.pde")
	include("feature.xml")
	var propertiesFile = p2FeatureProperties.flatMap { it.destinationFile }
	doFirst("filter") { t ->
		Properties properties = new Properties()
		propertiesFile.get().getAsFile().withReader("UTF-8") {
			properties.load(it)
			properties.put("master-version", masterVersion)
		}
		t.filter(ReplaceTokens.class, "tokens": properties)
	}
}

var p2 = tasks.register("p2") {
	description = "Publish the p2 repositories."
	group = PublishingPlugin.PUBLISH_TASK_GROUP
	var javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(8)
	}
	inputs.files(p2Plugins).withPropertyName("p2Plugins")
	inputs.files(p2FeatureMain).withPropertyName("p2FeatureMain")
	inputs.files(p2FeatureM2e).withPropertyName("p2FeatureM2e")
	inputs.files(p2FeaturePde).withPropertyName("p2FeaturePde")
	inputs.file("p2.xml").withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("p2.xml")
	inputs.file("features/category.xml").withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("category.xml")
	var buildDirectoryProperty = layout.getBuildDirectory()
	var destinationDirectory = buildDirectoryProperty.dir("p2")
	outputs.dir(destinationDirectory).withPropertyName("destinationDirectory")
	var eclipseDir = file("eclipse-3.5.2")
	var categoryURI = uri("features/category.xml")
	var injected = objects.newInstance(Injected)
	doLast("exec") { t ->
		injected.exec.javaexec {
			executable = javaLauncher.get().getExecutablePath().getAsFile().getAbsolutePath()
			classpath("${eclipseDir}/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar")
			mainClass = "org.eclipse.equinox.launcher.Main"
			if (logger.isDebugEnabled()) {
				args("-consoleLog")
			}
			args("-application", "org.eclipse.ant.core.antRunner")
			args("-data", buildDirectoryProperty.get().getAsFile())
			if (logger.isDebugEnabled()) {
				args("-debug")
			} else {
				args("-quiet")
			}
			args("-buildfile", "p2.xml")
			args("p2Bndtools")
		}.assertNormalExitValue()

		injected.exec.javaexec {
			executable = javaLauncher.get().getExecutablePath().getAsFile().getAbsolutePath()
			classpath("${eclipseDir}/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar")
			mainClass = "org.eclipse.equinox.launcher.Main"
			if (logger.isDebugEnabled()) {
				args("-consoleLog")
			}
			args("-application", "org.eclipse.equinox.p2.publisher.CategoryPublisher")
			args("-data", buildDirectoryProperty.get().getAsFile())
			args("-metadataRepository", destinationDirectory.get().getAsFile().toURI())
			args("-categoryDefinition", categoryURI)
			args("-compress")
		}.assertNormalExitValue()

		injected.fs.delete {
			delete(fileTree(eclipseDir).include("configuration/*.log"),
					"${eclipseDir}/configuration/org.eclipse.core.runtime",
					"${eclipseDir}/configuration/org.eclipse.equinox.app",
					"${eclipseDir}/configuration/org.eclipse.osgi",
					"${eclipseDir}/p2")
		}
	}
}

tasks.named("jar") {
	inputs.files(p2).withPropertyName("p2")
}
