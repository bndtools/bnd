/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants
import aQute.lib.io.IO

/* Add bnd gradle plugin as a script dependency */
buildscript {
  dependencies {
    classpath bndPlugin
  }
}

/* Initialize the bnd workspace */
Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
ext.bndWorkspace = new Workspace(rootDir, bnd_cnf).setOffline(gradle.startParameter.offline)
bndWorkspace.setOffline(gradle.startParameter.offline)

ext.cnf = rootProject.project(bnd_cnf)

/* Configure the subprojects */
subprojects {
  def bndProject = bndWorkspace.getProject(name)
  if (bndProject != null) {
    plugins.apply 'biz.aQute.bnd'
    group bnd('-groupid')
    version bnd('base.version')
    /* Turn off javadoc 8 overly pedantic lint checking */
    if (JavaVersion.current().isJava8Compatible()) {
      javadoc.options.addStringOption('Xdoclint:none', '-quiet') 
    }
    /* test folders are not part of jar but used by unit tests  */
    def testfolders = ['testresources/', 'testdata/']
    jar {
      projectDirInputsExcludes << '.*'
      projectDirInputsExcludes += testfolders
    }
    test {
      testLogging {
        exceptionFormat 'full'
      }
      inputs.files fileTree(projectDir) {
        include testfolders
        exclude {
          def f = it.file
          if (f.directory && f.list().length == 0) {
            return true
          }
          try {
            return "git check-ignore ${f}".execute().waitFor() == 0
          } catch (Exception e) {
            return false
          }
        }
      }
      if (System.properties['maven.repo.local']) {
        systemProperty 'maven.repo.local', IO.getFile(rootProject.rootDir, System.properties['maven.repo.local'])
      }
    }
  }
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}

task buildscriptDependencies << {
    println buildscript.configurations.classpath.asPath
}
