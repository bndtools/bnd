/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.lib.io.IO
import aQute.bnd.osgi.Constants

/*
 * Compute the build time stamp. 
 * If the git workspace is clean, the build time is the time of the head commit.
 * If the git workspace is dirty, the build time is the current time.
 */
gradle.projectsEvaluated {
  if ('git diff --no-ext-diff --quiet'.execute().waitFor() == 0) {
    bndWorkspace.setProperty(Constants.TSTAMP, 'git show --no-patch --format=%ct000'.execute().text.trim())
  } else {
    bndWorkspace.setProperty(Constants.TSTAMP, Long.toString(System.currentTimeMillis()))
  }
}
gradle.buildFinished {
  bndWorkspace.unsetProperty(Constants.TSTAMP)
}

/* Configure the subprojects */
subprojects {
  if (plugins.hasPlugin('biz.aQute.bnd')) {
    group bnd('-groupid')
    version bnd('base.version')
    javadoc.options.tags = [
      'Immutable:t:',
      'ThreadSafe:t:',
      'NotThreadSafe:t:',
      'GuardedBy:mf:"Guarded By:"']
    /* test folders are not part of jar but used by unit tests  */
    def testfolders = ['testresources/', 'testdata/']
    jar {
      projectDirInputsExcludes.add('.*')
      projectDirInputsExcludes.addAll(testfolders)
    }
    test {
      testLogging {
        exceptionFormat 'full'
      }
      inputs.files(fileTree(projectDir) {
        include testfolders
        exclude {
          def f = it.file
          if (f.directory && f.list().length == 0) {
            return true
          }
          try {
            return "git check-ignore ${f}".execute().waitFor() == 0
          } catch (Exception e) {
            return false
          }
        }
      }).withPropertyName('testFolders')
      if (System.properties['maven.repo.local']) {
        systemProperty 'maven.repo.local', IO.getFile(gradle.startParameter.currentDir, System.properties['maven.repo.local'])
      }
    }
  }
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}

task buildscriptDependencies {
  doLast {
    println "bnd_plugin: ${bnd_plugin}"
    println "bnd_repourl: ${bnd_repourl}"
    println buildscript.configurations.classpath.asPath
  }
}
