apply plugin: 'groovy'

interface Injected {
	@Inject FileSystemOperations getFs()
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly localGroovy()
	compileOnly gradleApi()
	testImplementation gradleTestKit()
	testImplementation("org.spockframework:spock-core:2.0-M4-groovy-${GroovySystem.shortVersion}") {
		exclude group: 'org.codehaus.groovy'
		exclude group: 'org.junit.platform'
	}
}

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_9)) {
	tasks.withType(GroovyCompile.class).configureEach {
		groovyOptions.fork 'jvmArgs': jpmsOptions
	}
}

def pluginUnderTestResources = layout.buildDirectory.dir('plugin-under-test')

def pluginUnderTestMetadata = tasks.register('pluginUnderTestMetadata', WriteProperties.class) {
	def pluginClasspath = objects.fileCollection().from(configurations.runtimeClasspath.allArtifacts.files, configurations.runtimeClasspath)
	inputs.files(pluginClasspath).withNormalizer(ClasspathNormalizer).withPropertyName('pluginClasspath')
	outputFile = pluginUnderTestResources.map { it.file('plugin-under-test-metadata.properties') }
	doFirst('implementation-classpath') { t->
		t.property('implementation-classpath',  pluginClasspath.asPath)
	}
}

sourceSets {
	test {
		output.dir(pluginUnderTestResources, 'builtBy': pluginUnderTestMetadata)
	}
}

tasks.named('test') {
	def testresources = file('testresources')
	def target = layout.buildDirectory.dir('testresources')
	inputs.files(tasks.named('jar')).withPropertyName('jar')
	inputs.dir(testresources).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName('testresources')
	systemProperty 'bnd_version', bnd('bnd_version')
	systemProperty 'org.gradle.warning.mode', gradle.startParameter.warningMode.name().toLowerCase()
	def injected = objects.newInstance(Injected)
	doFirst('copy') { t ->
		// copy test resources into build dir
		injected.fs.delete {
			delete target
		}
		injected.fs.copy {
			from testresources
			into target
		}
	}
}

tasks.named('release') {
	dependsOn 'groovydoc'
}
